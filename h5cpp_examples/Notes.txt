=======================================================================================================

	HDF5 in Cpp

=======================================================================================================
//Creating a dataset

const H5std_string	FILE_NAME("h5tutr_dset.h5");
const H5std_string	DATASET_NAME("dset");
const int	 NX = 4;                     // dataset dimensions
const int	 NY = 6;
const int	 RANK = 2;

H5File file(FILE_NAME, H5F_ACC_TRUNC);

// Create the data space for the dataset.
hsize_t dims[2];               // dataset dimensions
dims[0] = NX;
dims[1] = NY;
DataSpace dataspace(RANK, dims);

// Create the dataset.
DataSet dataset = file.createDataSet(DATASET_NAME, PredType::STD_I32BE, dataspace);		//32 bits signed Big-Endian integers using STD



		Objects
			H5std_string
			hsize_t
			DataSpace
			DataSet
			H5File(FILE_NAME,H5F_ACC_TRUNC)						//HDF5 object with a constructor
		Functions
			dataspace(RANK, dims)							//RANK == NoOfDimensions
			file.createDataSet(DATASET_NAME, PredType::STD_I32BE, dataspace)	//PredType
			FILE_NAME(string)							//gives H5std_string in return
			DATASET_NAME(string)

=======================================================================================================

//reading and writing to data set

H5File file(FILE_NAME, H5F_ACC_RDWR);
DataSet dataset = file.openDataSet(DATASET_NAME);

// Write the data to the dataset using default memory space, file
// space, and transfer properties.
dataset.write(data, PredType::NATIVE_INT);

		Objects
		Functions
			dataset.write(data, PredType::NATIVE_INT)				//data == integer array in this case
=======================================================================================================
//creating an attribute for a dataset

const H5std_string	FILE_NAME( "h5tutr_dset.h5" );
const H5std_string	DATASET_NAME( "dset" );
const H5std_string	ATTR_NAME( "Units" );

const int	DIM1 = 2;

int attr_data[2] = { 100, 200};
hsize_t dims[1] = { DIM1 };

// Open an existing file and dataset.
H5File file( FILE_NAME, H5F_ACC_RDWR );
DataSet dataset = file.openDataSet( DATASET_NAME );

// Create the data space for the attribute.
DataSpace attr_dataspace = DataSpace (1, dims );

// Create a dataset attribute. 
Attribute attribute = dataset.createAttribute( ATTR_NAME, PredType::STD_I32BE, 
                                          attr_dataspace);

// Write the attribute data. 
attribute.write( PredType::NATIVE_INT, attr_data);


		Objects
			Attribute
		Functions
			ATTR_NAME(string)							//gives H5std_string in return
			dataset.createAttribute(ATTR_NAME, PredType::STD_I32BE, attr_dataspace)	//attr_dataspace == attribute object, attribute is attached to dataset
			attribute.write(PredType::NATIVE_INT, attr_data)			//attr_data == integer array to write to file
=======================================================================================================
//Create and close a group

const H5std_string FILE_NAME("h5tutr_group.h5");

// Create a new file using default property lists.
H5File file(FILE_NAME, H5F_ACC_TRUNC);

// Create a group named "/MygGroup" in the file
Group group(file.createGroup("/MyGroup"));

// File and group will be closed as their instances go out of scope.

		Objects
			Group(a handle to the group)
		Functions
			file.createGroup(string)						//string is in POSIX format
=======================================================================================================
//Absolute and relative names in creating groups
const H5std_string FILE_NAME("h5tutr_groups.h5");

// Create a new file using default properties.

H5File file(FILE_NAME, H5F_ACC_TRUNC);

// Create group "MyGroup" in the root group using an absolute name.
 
Group group1(file.createGroup( "/MyGroup"));

// Create group "Group_A" in group "MyGroup" using an
// absolute name.

Group group2(file.createGroup("/MyGroup/Group_A"));   

// Create group "Group_B" in group "MyGroup" using a
// relative name.

Group group3(group1.createGroup ("Group_B"));

// Close the groups and file.

group1.close();
group2.close();
group3.close();
file.close();

		Objects
		Functions
			group.close()								//gives H5std_string in return
			file.close()
=======================================================================================================
//creating and writing to a data set

const H5std_string FILE_NAME("h5tutr_groups.h5");
const H5std_string DATASET_NAME1("/MyGroup/dset1");
const H5std_string DATASET_NAME2("dset2");
const int	RANK = 2;
const int	D1DIM1 = 3;
const int	D1DIM2 = 3;
const int	D2DIM1 = 2;
const int	D2DIM2 = 10;


int dset1_data[D1DIM1][D1DIM2], dset2_data[D2DIM1][D2DIM2]; // data buffers
int i, j;

// Initialize the first dataset. 
for (i = 0; i < D1DIM1; i++)
    for (j = 0; j < D1DIM2; j++)
       dset1_data[i][j] = j + 1;

//  Initialize the second dataset. 
for (i = 0; i < D2DIM1; i++)
  for (j = 0; j < D2DIM2; j++)
      dset2_data[i][j] = j + 1;

// Open an existing file and dataset.
H5File file(FILE_NAME, H5F_ACC_RDWR);

// Create the data space for the first dataset.  Note the use of
// pointer for the instance 'dataspace'.  It can be deleted and
// used again later for another data space.  An HDF5 identifier is
// closed by the destructor or the method 'close()'.
hsize_t dims[RANK];               // dataset dimensions
dims[0] = D1DIM1;
dims[1] = D1DIM2;
DataSpace *dataspace = new DataSpace (RANK, dims);

// Create the dataset in group "MyGroup".  Same note as for the
// dataspace above.
DataSet *dataset = new DataSet (file.createDataSet(DATASET_NAME1, 
                                 PredType::STD_I32BE, *dataspace));

// Write the data to the dataset using default memory space, file
// space, and transfer properties.
dataset->write(dset1_data, PredType::NATIVE_INT);

// Close the current dataset and data space.
delete dataset;
delete dataspace;

// Create the data space for the second dataset.
dims[0] = D2DIM1;
dims[1] = D2DIM2;
dataspace = new DataSpace (RANK, dims);

// Create group "Group_A" in group "MyGroup".
Group group(file.openGroup("/MyGroup/Group_A"));

// Create the second dataset in group "Group_A".
dataset = new DataSet (group.createDataSet(DATASET_NAME2, 
                                 PredType::STD_I32BE, *dataspace));

// Write the data to the dataset using default memory space, file
// space, and transfer properties.
dataset->write(dset2_data, PredType::NATIVE_INT);

// Close all objects.
delete dataspace;
delete dataset;
group.close();
		Objects
		Functions
			DataSet *dataset = new DataSet (file.createDataSet(DATASET_NAME1, PredType::STD_I32BE, *dataspace));							//gives H5std_string in return
			dataset->write(dset1_data, PredType::NATIVE_INT);





































=======================================================================================================
=======================================================================================================
=======================================================================================================
=======================================================================================================



